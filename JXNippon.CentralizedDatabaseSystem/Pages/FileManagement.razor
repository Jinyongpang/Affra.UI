@page "/filemanagement"
@using System.Linq;
@using System.Linq.Dynamic.Core;
@using Affra.Core.Domain.Services
@using JXNippon.CentralizedDatabaseSystem.Domain.Extensions
@using JXNippon.CentralizedDatabaseSystem.Domain.FileManagements
@using Microsoft.OData.Client
@using Microsoft.OData.Extensions.Client
@inject IServiceProvider ServiceProvider
@inject NotificationService NotificationService

<PageTitle>File Management</PageTitle>

<h1>File Management</h1>
<RadzenButton Text="Reload" Click="@Reload" Style="margin-bottom: 20px;" />
<RadzenDataGrid @ref="grid" IsLoading="@isLoading" Count="@count" Data="@files" LoadData="@LoadData" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowFiltering="false" AllowPaging="true" PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" TItem="DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File" Property="FolderName" Filterable="false" Title="Folder Name" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File" Property="FileName" Title="File Name" />
        <RadzenDataGridColumn TItem="DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File" Property="LastUpdatedDateTime" Title="Last Updated Date Time" Width="150px">
            <Template Context="file">
                @String.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:f}", file.LastUpdatedDateTime.ToLocalTime())
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File" Property="NumberOfAttempts" Title="Attempts">
            <EditTemplate Context="file">
                <RadzenNumeric @bind-Value="file.NumberOfAttempts" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File" Property="ProcessStatus" Title="Process Status"/>
        <RadzenDataGridColumn TItem="DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
            <Template Context="file">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(file))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="file">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(file))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(file))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="file">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(file))"  @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="file">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(file))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File> grid;
    private IEnumerable<DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File> files;
    private DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File fileToInsert;
    private int count;
    private bool isLoading;

    async Task Reload()
    {
        grid.Reset(true); 
        await grid.Reload();
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        using var serviceScope = ServiceProvider.CreateScope();
        var fileManagementService = this.GetFileManagementService(serviceScope);
        var filesResponse = await fileManagementService.Get()
            .AppendQuery(args.Filter, args.Skip, args.Top, args.OrderBy)
            .ToQueryOperationResponseAsync<DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File>();

        count = (int)filesResponse.Count;
        files = filesResponse.ToList();

        isLoading = false;
    }

    async Task EditRow(DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File file)
    {
        await grid.EditRow(file);
    }

    async Task SaveRow(DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File file)
    {
        try
        {
            if (file == fileToInsert)
            {
                fileToInsert = null;
            }
            using var serviceScope = ServiceProvider.CreateScope();
            var fileService = this.GetGenericFileService(serviceScope);
            await fileService.UpdateAsync(file, file.Id);
            // file = await GenericFileService.GetByIdAsync(file.Id);
            await grid.UpdateRow(file);
        }
        catch (Exception ex)
        {
            HandleException(ex);
            throw;
        }
    }

    void CancelEdit(DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File file)
    {
        if (file == fileToInsert)
        {
            fileToInsert = null;
        }

        grid.CancelEditRow(file);

    }

    async Task DeleteRow(DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File file)
    {
        try
        {
            if (file == fileToInsert)
            {
                fileToInsert = null;
            }

            if (files.Contains(file))
            {
                using var serviceScope = ServiceProvider.CreateScope();
                var fileService = this.GetGenericFileService(serviceScope);
                await fileService.DeleteAsync(file);
                await grid.Reload();
            }
            else
            {
                grid.CancelEditRow(file);
            }
        }
        catch (Exception ex)
        {
            HandleException(ex);
            throw;
        }
    }

    void HandleException(Exception ex)
    {
        NotificationService.Notify(new()
            {
                Summary = "Error",
                Detail = ex.InnerException?.ToString(),
                Severity = NotificationSeverity.Error,
                Duration = 120000,
            });
    }

    IGenericService<DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File> GetGenericFileService(IServiceScope serviceScope)
    {
        return serviceScope.ServiceProvider.GetRequiredService<IGenericService<DataExtractorODataService.Affra.Service.DataExtractor.Domain.Files.File>>();     
    }

    IFileManagementService GetFileManagementService(IServiceScope serviceScope)
    {
        return serviceScope.ServiceProvider.GetRequiredService<IFileManagementService>();     
    }

}
