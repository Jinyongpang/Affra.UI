@page "/Debug"
@using CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.DailyProductions
@using CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.Logistics
@using CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.PEReports;
@using CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.ProducedWaterTreatmentSystems
@using System.Reflection
@using JXNippon.CentralizedDatabaseSystem.Domain.Interfaces
@using JXNippon.CentralizedDatabaseSystem.Domain.Views
@using JXNippon.CentralizedDatabaseSystem.Shared.Views
@using ViewODataService.Affra.Service.View.Domain.Views

@attribute [Authorize(Policy = "Administration.Read")]

<PageTitle>Debug</PageTitle>

<RadzenBreadCrumb>
    <ChildContent>
        <RadzenBreadCrumbItem Path="/" Text="Home" />
        <RadzenBreadCrumbItem Path="/Debug" Text="Debug" />
    </ChildContent>
</RadzenBreadCrumb>

<Button OnClick=this.UniformanceTEst>Uniformance</Button>
 <RadzenTextArea class="w-100" Placeholder="Expression..." @bind-Value="@Eval.Expression"></RadzenTextArea>
 <RadzenButton Click=@OnClickAsync></RadzenButton>


<GenericDataGrid TItem="DailyLogistic" @ref="dataGrid" LoadData=@(args => LoadDataAsync(args)) 
    ShowRefreshButton="true" PagerAlwaysVisible="true" ShowDateColumn="true"/>

<GenericDataGrid TItem="DailyHIPProduction"
    ShowRefreshButton="true" PagerAlwaysVisible="true" ShowDateColumn="true"/>

@{
     string t = ViewService.GetTypeMapping()["DailyLogistic"];
     <DataGridComponent TType=@t></DataGridComponent>
}


<div class="row">
    <div class="col">
        <GenericChart TItem="DailyDeOilerInjection" AxisTitle="Level" FormatString="{0:d}" Step="TimeSpan.FromDays(1)" ChartSeries="@chartSeries"></GenericChart>
    </div>
</div>

@{

                Assembly assembly = typeof(View).Assembly;
            var a = assembly.GetTypes()
                   .DistinctBy(t => t.Name)
                   .Where(t => t.Name.StartsWith("Daily"))
                   .Where(t => !t.Name.EndsWith("Single"))
                   .ToDictionary(x => x.Name, x => x.Namespace);
            foreach (var type in a)
            {

                var res = @"namespace CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.ProducedWaterTreatmentSystems
{
    public partial class DailyDeOilerInjection : IDaily
        {
            [IgnoreClientProperty]
            public DateTime DateUI
            {
                get
                {
                    return this.Date.LocalDateTime;
                }
                set
                {
                    this.Date = value.ToUniversalTime();
                }
            }
        }
    }";
                res = res.Replace("DailyDeOilerInjection", type.Key);
                res = res.Replace("CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.ProducedWaterTreatmentSystems", type.Value);
                <a>@res</a>
            }
            foreach (var type in a)
            {

                var res = "<data name=\"DailyHIPAndLWPSummary\" xml:space=\"preserve\">\n<value>HIP / LWP Summary</value>\n</data>";
                res = res.Replace("DailyHIPAndLWPSummary", type.Key);
                res = res.Replace("HIP / LWP Summary", type.Key);
                <a>@res</a>
            }

            a = assembly.GetTypes()
                   .DistinctBy(t => t.Name)
                   .Where(t => t.Name.StartsWith("Monthly"))
                   .Where(t => !t.Name.EndsWith("Single"))
                   .ToDictionary(x => x.Name, x => x.Namespace);
            foreach (var type in a)
            {

                var res = @"namespace CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.ProducedWaterTreatmentSystems
{
    public partial class DailyDeOilerInjection : IMonthly
        {

        }
    }";
                res = res.Replace("DailyDeOilerInjection", type.Key);
                res = res.Replace("CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.ProducedWaterTreatmentSystems", type.Value);
                <a>@res</a>
            }

            var b = assembly.GetTypes()
                   .DistinctBy(t => t.Name)
                   .Where(t => t.Name.StartsWith("Daily"))
                   .Where(t => !t.Name.EndsWith("Single"))
                   .ToDictionary(x => x.Name, x => x.Namespace);
            foreach (var type in b)
            {

                var res = @"            modelBuilder.Entity<CombinedDailyReport>()
                .HasOne(x => x.DailyInowacInjection)
                .WithOne(x => x.CombinedDailyReport)
                .OnDelete(DeleteBehavior.Cascade)
                .HasPrincipalKey<CombinedDailyReport>(x => x.Date)
                .HasForeignKey<DailyInowacInjection>(x => x.Date);";
                res = res.Replace("DailyInowacInjection", type.Key);
        <a>@res</a>
    }

    <br/>
    <br/>
    var alltypes = assembly.GetTypes()
           .DistinctBy(t => t.Name)
           .Where(t => t.Name.StartsWith("Daily"))
           .Where(t => !t.Name.EndsWith("Single"));

    foreach (var type in alltypes)
    {

         @($"<Panel Header=\"{type.Name}\" Key=\"1\">")
         <br/>
         @("<ChildContent>")
         <br/>
         @("<Descriptions Size=\"small\" Bordered>");
         <br/>
        foreach (var prop in type.GetProperties())
        {
            if (prop.PropertyType == typeof(decimal?)
            || prop.PropertyType == typeof(decimal)
            || prop.PropertyType == typeof(double)
            || prop.PropertyType == typeof(double?))
            {
                <br/>
                @($"<DecimalDescriptionItem Title=\"{prop.Name}\" Value=@this.Item.{type.Name}?.{prop.Name} IsEditing=@this.isEditing/>")
            }
            else if (prop.PropertyType == typeof(int?)
                || prop.PropertyType == typeof(int))
            {  <br/>
                @($"<IntegerDescriptionItem Title=\"{prop.Name}\" Value=@this.Item.{type.Name}?.{prop.Name} IsEditing=@this.isEditing/>")
            }
            else if (prop.PropertyType == typeof(string))
            {  <br/>
                @($"<StringDescriptionItem Title=\"{prop.Name}\" Value=@this.Item.{type.Name}?.{prop.Name} IsEditing=@this.isEditing/>")
            }
            else if (prop.PropertyType == typeof(DateTime?)
                || prop.PropertyType == typeof(DateTime)
                || prop.PropertyType == typeof(DateTimeOffset?)
                || prop.PropertyType == typeof(DateTimeOffset))
            {   <br/>
                @($"<DateDescriptionItem Title=\"{prop.Name}\" Value=@this.Item.{type.Name}?.{prop.Name} IsEditing=@this.isEditing/>")
            }
        }
        <br/>
        @("</Descriptions>")
        <br/>
        @("</ChildContent>")
        <br/>
        @("</Panel>")
    }

    <br/>
    foreach (var type in alltypes)
    {
        @($".Expand(x => x.{type.Name})")
        <br/>
    }

    <br/>
    foreach (var type in alltypes)
    {

         @($"<Panel Header=\"{type.Name}\" Key=\"1\">")
         <br/>
         @("<ChildContent>")
         <br/>
         @("<Descriptions Size=\"small\" Bordered>");
         <br/>
         @($"<Virtualize TItem={type.Name} Items=@this.Item.{type.Name}s>");
        foreach (var prop in type.GetProperties())
        {
            if (prop.PropertyType == typeof(decimal?)
            || prop.PropertyType == typeof(decimal)
            || prop.PropertyType == typeof(double)
            || prop.PropertyType == typeof(double?))
            {
                <br/>
                @($"<DecimalDescriptionItem Title=\"{prop.Name}\" Value=@context.{prop.Name} IsEditing=@this.isEditing/>")
            }
            else if (prop.PropertyType == typeof(int?)
                || prop.PropertyType == typeof(int))
            {  <br/>
                @($"<IntegerDescriptionItem Title=\"{prop.Name}\" Value=@context.{prop.Name} IsEditing=@this.isEditing/>")
            }
            else if (prop.PropertyType == typeof(string))
            {  <br/>
                @($"<StringDescriptionItem Title=\"{prop.Name}\" Value=@context.{prop.Name} IsEditing=@this.isEditing/>")
            }
            else if (prop.PropertyType == typeof(DateTime?)
                || prop.PropertyType == typeof(DateTime)
                || prop.PropertyType == typeof(DateTimeOffset?)
                || prop.PropertyType == typeof(DateTimeOffset))
            {   <br/>
                @($"<DateDescriptionItem Title=\"{prop.Name}\" Value=@context.{prop.Name} IsEditing=@this.isEditing/>")
            }
        }
        <br/>
        @($"</Virtualize>");
        <br/>
        @("</Descriptions>")
        <br/>
        @("</ChildContent>")
        <br/>
        @("</Panel>")
    }


    var peReportType = typeof(PEReport);
    <br />

    foreach (var property in peReportType.GetProperties())
    {
        @($".Expand(x => x.{property.Name})")
        <br />
    }

}