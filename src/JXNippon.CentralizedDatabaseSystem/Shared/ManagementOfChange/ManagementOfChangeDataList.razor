@using JXNippon.CentralizedDatabaseSystem.Shared.Description
@using ManagementOfChangeODataService.Affra.Service.ManagementOfChange.Domain.ManagementOfChanges
 
<div class="row">
    <div class="col">
        @if (!isLoading && count == 0)
        {       
            <div class="min-vh-56 d-flex align-items-center justify-content-center gap-3">
                <GenericDescription Height="300px" ImageFile="@ImageFile.NoData" Description="No result found.">
                </GenericDescription>
            </div>
        }
        <AntList Class="py-3 px-3" Loading=isLoading @ref="_managementOfChangeList" DataSource="@managementOfChanges" TItem="ManagementOfChangeRecord" Grid=grid>
            <ChildContent>
                <ListItem>
                    <div onclick=@(() => ShowDialogAsync(context))>
                        <Card Style="min-height:200px;" Hoverable="true" >
                            <TitleTemplate>
                               <div class="d-flex flex-row align-items-center">
                                    <div>
                                        <span class="mb-0 title" href="#"><i class="oi oi-spreadsheet"></i> @(context.RecordNumber)</span>
                                    </div>
                               </div>
                            </TitleTemplate>
                            <Body>
                               <div class="d-flex flex-row align-items-center">
                                    <div class="col-9">
                                        <div>Title Of Change : @context.TitleOfChange</div>
                                        <div>Field : @(context.ManagementOfChangeField.ToString())</div>
                                        <div>Duration of Change : @(context.Identification.DurationOfChange)</div>
                                    </div>
                                    <div class="col-3 text-center">
                                        <Progress Format=_fortmat1 Type=ProgressType.Circle Percent=@(GetPercentage((int)Enum.Parse(typeof(ManagementOfChangeCurrentStep), context.ManagementOfChangeCurrentStep.ToString()))) Size=ProgressSize.Small />
                                    </div>
                                </div>
                                <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                                <div class="row">
                                    <div class="col-md-8 text-truncate card-time">
                                        <b>@string.Format(System.Globalization.CultureInfo.CurrentCulture, "Created Date : {0:d}", context.CreatedDateTime.ToLocalTime())</b>
                                        <b>@string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:t}", context.CreatedDateTime.ToLocalTime())</b>
                                    </div>
                                    <div class="col-md-8 text-truncate card-time">
                                        <b>@string.Format(System.Globalization.CultureInfo.CurrentCulture, "Expiry Date : {0:d}", context.Identification.ExpiryDate.ToLocalTime())</b>
                                        <b>@string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:t}", context.Identification.ExpiryDate.ToLocalTime())</b>
                                    </div>
                                    <div class="col-md-4 text-right">
                                        @if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.Completed)
                                        {
                                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@(context.ManagementOfChangeStatus.ToString())"/>
                                        }
                                        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.Extension)
                                        {
                                            <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="@(context.ManagementOfChangeStatus.ToString())"/>
                                        }
                                        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.Pending)
                                        {
                                            <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="@(context.ManagementOfChangeStatus.ToString())"/>
                                        }
                                        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.Deleted)
                                        {
                                            <RadzenBadge BadgeStyle="BadgeStyle.Dark" Text="@(context.ManagementOfChangeStatus.ToString())" />
                                        }
                                        else
                                        {
                                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@(context.ManagementOfChangeStatus.ToString())"/>
                                        }
                                    
                                    </div>
                                </div>
                            </Body>
                            <Extra>
                                @if (context.ManagementOfChangeStatus != ManagementOfChangeStatus.Deleted)
                                {
                                    <Popover Placement="@Placement.RightBottom">
                                        <ContentTemplate>
                                            <Menu Mode=MenuMode.Vertical Class="popup-menu">
                                                <MenuItem Key="DeleteForm"><a @onclick="@(() => DeleteMOCFormAsync(context))"><i class="fas fa-trash fa-fw fa-xl"></i> Delete Form...</a></MenuItem>
                                            </Menu>
                                        </ContentTemplate>
                                        <ChildContent>
                                            <AntDesign.Button><i class="fa-solid fa-ellipsis-vertical extra-icon"></i></AntDesign.Button>
                                        </ChildContent>
                                    </Popover>
                                }
                            </Extra>
                        </Card>
                    </div> 
                </ListItem>      
            </ChildContent>
            <LoadMore>
                @if (!initLoading && !isLoading && currentCount < count)
                {
                    <div class="loadmore-btn-content">
                        <Button Type="primary" OnClick="OnLoadMoreAsync">loading more</Button>
                    </div>
                }
            </LoadMore>
        </AntList>
    </div>
</div>