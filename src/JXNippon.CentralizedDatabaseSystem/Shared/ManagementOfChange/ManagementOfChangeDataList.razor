@using JXNippon.CentralizedDatabaseSystem.Shared.Description
@using ManagementOfChangeODataService.Affra.Service.ManagementOfChange.Domain.ManagementOfChanges
 
@if (DisplayType == "Card")
{
    @if (!isLoading && count == 0)
    {
        <div class="min-vh-56 d-flex align-items-center justify-content-center gap-3">
            <GenericDescription Height="300px" ImageFile="@ImageFile.Merger" Description="No result found.">
            </GenericDescription>
        </div>
    }
    <div class="row px-3 py-2">
        <Virtualize Context="context" ItemsProvider="@LoadDataAsync" TItem=ManagementOfChangeRecord ItemSize=25 OverscanCount=10 @ref=@this.virtualize>
            <Placeholder>
                <div class="col-sm-12 col-md-4 py-2 pr-1" style="min-height:200px;">
                    <Card Class="h-100">
                        <Body>
                            <Skeleton Active></Skeleton>
                        </Body>
                    </Card>
                </div>
            </Placeholder>
            <ItemContent>
                <div class="col-sm-12 col-md-4 py-2 pr-1" style="min-height:200px;">
                    <Card Style="min-height:200px;" Class="data-list-card">
                        <TitleTemplate>
                            <div class="d-flex flex-row align-items-center">
                                <div>
                                    <span class="mb-0 title" href="#"><i class="oi oi-spreadsheet"></i> @(context.RecordNumber)</span>
                                </div>
                            </div>
                        </TitleTemplate>
                        <Body>
                            <div class="d-flex flex-row align-items-center">
                                <div class="col-9">
                                    <div class="text-truncate">Title : @context.TitleOfChange</div>
                                    <div class="text-truncate">Field : @(context.ManagementOfChangeField.ToString())</div>
                                    <div class="text-truncate">Duration : @(context.Identification.DurationOfChange) days</div>
                                    <div class="text-truncate">Reason : @(context.Identification.ReasonForChange)</div>
                                    <div class="text-truncate">Creator : @(context.CreatedBy)</div>
                                </div>
                                <div class="col-3 text-center">
                                    <Progress Format=_fortmat1 Type=ProgressType.Circle Percent=@(GetPercentage((int)Enum.Parse(typeof(ManagementOfChangeCurrentStep), context.ManagementOfChangeCurrentStep.ToString()))) Size=ProgressSize.Small />
                                </div>
                            </div>
                            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                            <div class="row">
                                <div class="col-md-8 text-truncate card-time">
                                    <b>@string.Format(System.Globalization.CultureInfo.CurrentCulture, "Created Date : {0:d}", context.CreatedDateTime.ToLocalTime())</b>
                                </div>
                                <div class="col-md-8 text-truncate card-time">
                                    <b>@string.Format(System.Globalization.CultureInfo.CurrentCulture, "Expiry Date : {0:d}", context.Identification.ExpiryDate.ToLocalTime())</b>
                                </div>
                                <div class="col-md-12 text-right" style="padding-top:5px">
                                    @this.GetStatusLabel(context)
                                </div>
                            </div>
                        </Body>
                        <ActionTemplate>
                            @if (isUserHavePermission
                           && context.ManagementOfChangeStatus != ManagementOfChangeStatus.Deleted)
                            {
                                <CardAction><Tooltip Title=@("Delete Form...")><Icon Class="anticon-big" Type="delete" OnClick="@(() => DeleteMOCFormAsync(context))" /></Tooltip></CardAction>
                            }
                            <CardAction><Tooltip Title=@("View...")><Icon Class="anticon-big" Type="eye" OnClick="@(() => ShowDialogAsync(context))" /></Tooltip></CardAction>
                        </ActionTemplate>
                    </Card>
                </div>
            </ItemContent>
        </Virtualize>
    </div>

}

else
{

    <div class="row h-100">
        <div class="col h-100">
            <RadzenDataGrid @ref="grid" Style="border-right: 0px !important; border-top: 0px !important; border-left: 1px solid #dbe0ea !important; border-bottom: 0px !important; height: 100% !important; box-shadow:none !important;"
                        IsLoading="@isLoading" Count="@count" Data="@items" LoadData="@LoadDataAsync"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting AllowFiltering
                        ColumnWidth="200px" TItem="ManagementOfChangeRecord"
                        AllowColumnResize AllowGrouping CellContextMenu="@OnCellContextMenu" AllowColumnPicking
                        AllowMultiColumnSorting ShowMultiColumnSortingIndex AllowPaging PageSize="60">
                <EmptyTemplate>
                    <div class="min-vh-56 d-flex align-items-center justify-content-center gap-3">
                        <GenericDescription Height="300px" ImageFile="@ImageFile.Merger" Description="No result found.">
                        </GenericDescription>
                    </div>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn CssClass="center-grid-content" HeaderCssClass="center-grid-title" TItem="ManagementOfChangeRecord" Property="TitleOfChange" Title="Title" Width="180px" />
                    <RadzenDataGridColumn CssClass="center-grid-content" HeaderCssClass="center-grid-title" TItem="ManagementOfChangeRecord" Property="ManagementOfChangeField" Title="Field" Width="80px" />
                    <RadzenDataGridColumn CssClass="center-grid-content" HeaderCssClass="center-grid-title" TItem="ManagementOfChangeRecord" Property="Identification.Duration" Title="Duration" Width="80px">
                        <Template>
                            @(context.Identification.DurationOfChange) days
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="center-grid-content" HeaderCssClass="center-grid-title" TItem="ManagementOfChangeRecord" Property="Identification.ReasonForChange" Title="Reason" Width="80px">
                        <Template>
                            @(context.Identification.ReasonForChange)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="center-grid-content" HeaderCssClass="center-grid-title" TItem="ManagementOfChangeRecord" Property="CreatedBy" Title="Creator" Width="200px" />
                    <RadzenDataGridColumn CssClass="center-grid-content" HeaderCssClass="center-grid-title" TItem="ManagementOfChangeRecord" Property="ManagementOfChangeStatus" Title="Status" Width="150px">
                       <Template>
                                @this.GetStatusLabel(context)
                       </Template> 
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="center-grid-content" HeaderCssClass="center-grid-title" TItem="ManagementOfChangeRecord" Property="CloseOut.Date" Title="Close Out" Width="100px">
                        <Template>
                            @string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:d}", context.CloseOut?.DateUI)
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn CssClass="center-grid-content" HeaderCssClass="center-grid-title" TItem="ManagementOfChangeRecord" Property="ExtensionsString" Title="Extensions" Sortable=false Filterable=false Width="120px">
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
}
@code {

    private void OnCellContextMenu(MouseEventArgs args)
    {
        bool hasRowData = (args as DataGridCellMouseEventArgs<ManagementOfChangeRecord>) != null;
        ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="@(e => OnMenuItemClickAsync(args as DataGridCellMouseEventArgs<ManagementOfChangeRecord>, e))">
        <AuthorizeView Policy="Deferment.ReadWrite">
            <RadzenMenuItem Text="Edit ..." Value="1" Icon="description" Visible=@hasRowData />
            <RadzenMenuItem Text="Delete ..." Value="2" Icon="delete" Visible=@hasRowData />
        </AuthorizeView>
        <RadzenMenuItem Text="Refresh" Value="4" Icon="refresh" />
        </RadzenMenu>
    );
    }

    private Task OnMenuItemClickAsync(DataGridCellMouseEventArgs<ManagementOfChangeRecord> args, MenuItemEventArgs e)
    {
        int i = (int)e.Value;
        if (i == 1)
        {
            return this.ShowDialogAsync(args.Data);
        }
        else if(i == 2)
        {
            return this.DeleteMOCFormAsync(args.Data);
        }
        else if (i == 4)
        {
            return this.grid.Reload();
        }

        return Task.CompletedTask;
    }

    private RenderFragment GetStatusLabel(ManagementOfChangeRecord context)
    {
        @if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.ClosedOut)
        {
            return @<RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="@(stringLocalizer[context.ManagementOfChangeStatus.ToString()])" />;
        }
        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.Extension)
        {
            return @<RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="@(stringLocalizer[context.ManagementOfChangeStatus.ToString()])" />;
        }
        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.PendingForApproval)
        {
            return @<RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="@(stringLocalizer[context.ManagementOfChangeStatus.ToString()])" />;
        }
        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.PendingForCloseOut)
        {
            return @<RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@(stringLocalizer[context.ManagementOfChangeStatus.ToString()])" />;
        }
        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.Approved)
        {
            return @<RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@(stringLocalizer[context.ManagementOfChangeStatus.ToString()])" />;
        }
        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.Rejected)
        {
            return @<RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="@(stringLocalizer[context.ManagementOfChangeStatus.ToString()])" />;
        }
        else if (context.ManagementOfChangeStatus == ManagementOfChangeStatus.Deleted)
        {
            return @<RadzenBadge BadgeStyle="BadgeStyle.Dark" Text="@(stringLocalizer[context.ManagementOfChangeStatus.ToString()])" />;
        }
        else
        {
            return @<RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@(stringLocalizer[context.ManagementOfChangeStatus.ToString()])" />;
        }
    }
}