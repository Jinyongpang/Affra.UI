@using JXNippon.CentralizedDatabaseSystem.Domain.CommonHelpers
@using JXNippon.CentralizedDatabaseSystem.Domain.Extensions
@typeparam TItem
@typeparam TDialog
@inject ICommonHelper CommonHelper;

<RadzenDataGrid @ref="grid" IsLoading="@isLoading" Count="@Count" Data="@items" LoadData="@LoadDataAsync" 
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowFiltering="false" AllowPaging="true" 
    PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" TItem="TItem" 
    ColumnWidth="200px" AllowColumnResize="true" ShowPagingSummary="true" 
    AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true"
    PagerAlwaysVisible="@PagerAlwaysVisible" CellContextMenu="@OnCellContextMenu" Responsive>
    <EmptyTemplate>                
        <div class="row" @oncontextmenu=@(args => OnCellContextMenu(args)) @oncontextmenu:preventDefault="true">
            <a>No records to display.</a>
        </div>                    
    </EmptyTemplate>
    <Columns>
        @this.Columns
        @if (this.customColumns is not null)
        {
            foreach(var customColumn in this.customColumns)
            {
                <RadzenDataGridColumn Context="item" TItem="TItem" Property="@customColumn.PropertyName" Title="@customColumn.Title" Type="@this.ExtraColumnService.GetType(customColumn.Type)" Sortable=false Filterable=false>
                    <Template Context="item">
                        @((MarkupString)this.ExtraColumnService.GetStringValue(customColumn, item.AsIExtras().ExtraDictionary))
                    </Template>
                </RadzenDataGridColumn>
            }
        }
    </Columns>
</RadzenDataGrid>  

@code
{
    private void OnCellContextMenu(MouseEventArgs args)
    {
        bool hasRowData = (args as DataGridCellMouseEventArgs<TItem>) != null;
        ContextMenuService.Open(args, ds =>
           @<RadzenMenu Click="@(e => OnMenuItemClickAsync(args as DataGridCellMouseEventArgs<TItem>, e))">
                <RadzenMenuItem Text="Add ..." Value="0" Icon="note_add"/>
                <RadzenMenuItem Text="Edit ..." Value="1" Icon="description" Visible=@hasRowData/>
                <RadzenMenuItem Text="Delete ..." Value="2" Icon="delete" Visible=@hasRowData/>
                <RadzenMenuItem Text="View ..." Value="3" Icon="launch" Visible=@hasRowData/>
                <RadzenMenuItem Text="Refresh" Value="4" Icon="refresh"/>
                <RadzenMenuItem Text="History..." Value="5" Icon="history" Visible=@hasRowData/>
                <RadzenMenuItem Text="Deletion History..." Value="6" Icon="dns"/>
    </RadzenMenu>
    );  
    }
    private async Task OnMenuItemClickAsync(DataGridCellMouseEventArgs<TItem> args, MenuItemEventArgs e)
    {
        int i = (int)e.Value;
        if (i == 0)
        {
            TItem data = CommonHelper.Construct<TItem>();
            data.AsIDaily().DateUI = DateTimeOffset.Now.Date;
            await ShowDialogAsync(data, i, "Add");
        }
        else if (i == 1)
        {
            await ShowDialogAsync(args.Data, i, "Edit");
        }
        else if (i == 2)
        {
            await ShowDialogAsync(args.Data, i, "Delete");
        }
        else if (i == 3)
        {
            await ShowDialogAsync(args.Data, i, "View");
        }
        else if (i == 5)
        {
            await ShowDialogAsync(args.Data, i, "History");
        }
        else if (i == 6)
        {
            await ShowDialogAsync(null, i, "Deletion History");
        }
        else if (i == 4)
        {
            await grid.Reload();      
        }
    }
}