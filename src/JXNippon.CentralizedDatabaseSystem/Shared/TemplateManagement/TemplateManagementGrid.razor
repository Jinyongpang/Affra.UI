@using JXNippon.CentralizedDatabaseSystem.Shared.Description
@using System.Text.Json
@using ViewODataService.Affra.Service.View.Domain.Templates
@using ViewODataService.Affra.Service.View.Domain.Views

<div class="row h-100">
    <div class="col h-100">
        <RadzenDataGrid @ref="grid" Style="border-right: 0px !important; border-top: 0px !important; border-left: 1px solid #dbe0ea !important; border-bottom: 0px !important; height: 100% !important; box-shadow:none !important;" IsLoading="@isLoading" Count="@Count" Data="@items" LoadData="@LoadDataAsync" 
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowFiltering="false" AllowPaging="true" 
            PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" TItem="CustomColumn" 
            ColumnWidth="40px" AllowColumnResize="true" ShowPagingSummary="true" CellContextMenu="@OnCellContextMenu"
            AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true"
            PagerAlwaysVisible="@PagerAlwaysVisible">
            <EmptyTemplate>    
                <div class="min-vh-58 d-flex align-items-center justify-content-center gap-3">
                    <GenericDescription Height="250px" ImageFile="@ImageFile.ColumnConfig" Description="No custom template for this table created.">
                        <ChildContent>
                            <Button Type="primary" OnClick=@(args => ShowDialogAsync(
                                new CustomColumn() { Table = this.TableName },
                                0,
                                "Add"))>Create Now</Button>
                        </ChildContent>
                    </GenericDescription>
                </div>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="CustomColumn" Property="Table" Title="Table" Width="40px">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CustomColumn" Property="Title" Title="Title" Width="40px">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CustomColumn" Property="Type" Title="Type" Width="40px">
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>  
    </div>
</div>

@code
{
    private void OnCellContextMenu(MouseEventArgs args)
    {
        Console.WriteLine(JsonSerializer.Serialize(args));
        bool hasRowData = (args as DataGridCellMouseEventArgs<CustomColumn>) != null;
        ContextMenuService.Open(args, ds =>
           @<RadzenMenu Click="@(e => OnMenuItemClickAsync(args as DataGridCellMouseEventArgs<CustomColumn>, e))">
                <RadzenMenuItem Text="Add" Value="0" Icon="note_add"/>
                <RadzenMenuItem Text="Edit ..." Value="1" Icon="description" Visible=@hasRowData/>
                <RadzenMenuItem Text="Delete ..." Value="2" Icon="delete" Visible=@hasRowData/>
                <RadzenMenuItem Text="View ..." Value="3" Icon="launch" Visible=@hasRowData/>
                <RadzenMenuItem Text="Refresh" Value="4" Icon="refresh"/>
    </RadzenMenu>
    );  
    }

    private async Task OnMenuItemClickAsync(DataGridCellMouseEventArgs<CustomColumn> args, MenuItemEventArgs e)
    {
        int i = (int)e.Value;
        if (i == 0)
        {
            await ShowDialogAsync(new CustomColumn() { Table = this.TableName }, i, "Add");
        }
        else if (i == 1)
        {
            await ShowDialogAsync(args.Data, i, "Edit");
        }
        else if (i == 2)
        {
            await ShowDialogAsync(args.Data, i, "Delete");
        }
        else if (i == 3)
        {
            await ShowDialogAsync(args.Data, i, "View");
        }
        else if (i == 4)
        {
            await grid.Reload();      
        }
    }
}