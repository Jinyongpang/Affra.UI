@using System.Linq.Dynamic.Core
@using JXNippon.CentralizedDatabaseSystem.Models

<div class="view-header">
    <span>
      <i class="@Icon"></i>
        @Title
    </span>
</div>

<RadzenChart @ref="chart">
    @if(items != null)
    {   bool haveData = false;
        foreach(var series in ChartSeries)
        {
            var seriesList = this.GetSeries(series, items);

            foreach (var group in seriesList)
            {
                var seriesItem = group.SeriesItems;
                switch (series.ChartType)
                {
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.AreaChart:
                    {                           
                        <RadzenAreaSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value"
                            LineType="@((LineType)Enum.Parse(typeof(LineType), series.LineType))"
                            Smooth="@series.Smooth">
                            <RadzenMarkers MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                        </RadzenAreaSeries>
                        break;
                    }
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.LineChart:
                    {                           
                        <RadzenLineSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value"
                            LineType="@((LineType)Enum.Parse(typeof(LineType), series.LineType))"
                            Smooth="@series.Smooth">
                        <RadzenMarkers MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                        </RadzenLineSeries>
                        break;
                    };
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.BarChart:
                    {                           
                        <RadzenBarSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value"
                            LineType="@((LineType)Enum.Parse(typeof(LineType), series.LineType))">
                            <RadzenMarkers MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                        </RadzenBarSeries>
                        break;
                    };
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.ColumnChart:
                    {                           
                        <RadzenColumnSeries Data="@seriesItem" CategoryProperty="Category" 
                            Title="@group.Title" ValueProperty="Value" 
                            LineType="@((LineType)Enum.Parse(typeof(LineType), series.LineType))">
                            <RadzenMarkers MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                        </RadzenColumnSeries>
                        break;
                    };
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.DonutChart:
                    {                           
                        <RadzenDonutSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value">
                            <RadzenMarkers MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                        </RadzenDonutSeries>
                        break;
                    };
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.PieChart:
                    {                           
                        <RadzenPieSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value">
                            <RadzenMarkers MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                            </RadzenPieSeries>
                            break;
                        };
                    default:
                        {
                            break;       
                        }

                }


            }
            haveData = haveData || seriesList.Count() > 0;

        }
        if (!haveData)
        {
            <a>No records to display.</a>  
        }

    }
    else
    {
        <a>No records to display.</a>  
    }

    <RadzenCategoryAxis FormatString="@FormatString" Step="@Step"/>
    <RadzenValueAxis Step="@ValueAxisStep">
        <RadzenGridLines/>
        <RadzenAxisTitle Text="@AxisTitle"/>
    </RadzenValueAxis>
</RadzenChart>
