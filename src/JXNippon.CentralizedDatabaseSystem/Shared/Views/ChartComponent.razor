@using System.Linq.Dynamic.Core
@using JXNippon.CentralizedDatabaseSystem.Domain.Interfaces
@using JXNippon.CentralizedDatabaseSystem.Models
@using System.Collections.Concurrent

<RadzenChart @ref="chart">
    @if (items != null)
    {   bool haveData = false;    
        string[] colors = this.Colors.ToArray();
        int i = -1;

        foreach (var series in ChartSeries.OrderBy(x => x.Sequence))
        {
            var type = series.ActualType ?? TType;
            IEnumerable<IDaily> dailyItems = null;
            if (items is not null && items.TryGetValue(type.AssemblyQualifiedName, out dailyItems))
            {
            }
            var seriesList = this.GetSeries(series, dailyItems);

            foreach (var group in seriesList)
            {
                var seriesItem = group.SeriesItems;
                i++;
                if (i >= colors.Count())
                {
                    i = 0;
                }
                switch (series.ChartType)
                {
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.AreaChart:
                    {
                        string color = string.IsNullOrEmpty(series.Color)
                            ? colors[i]
                            : series.Color;

                        <RadzenAreaSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value"
                            LineType="@((LineType)Enum.Parse(typeof(LineType), series.LineType))"
                            Fill=@color
                            Smooth="@series.Smooth">
                            <TooltipTemplate Context="data">           
                                @(string.Format(this.FormatString, data.Category)) : @data.Value
                                </TooltipTemplate>
                            <ChildContent>      
                                <RadzenMarkers Stroke=@color MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                            </ChildContent>
                        </RadzenAreaSeries>
                        break;
                    }
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.LineChart:
                    {              
                        string color = string.IsNullOrEmpty(series.Color)
                            ? colors[i]
                            : series.Color;
                        <RadzenLineSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value"
                            LineType="@((LineType)Enum.Parse(typeof(LineType), series.LineType))"
                            Smooth="@series.Smooth" 
                            >
                            <TooltipTemplate Context="data">           
                                @(string.Format(this.FormatString, data.Category)) : @data.Value
                                </TooltipTemplate>
                            <ChildContent>      
                                <RadzenMarkers Stroke=@color MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                            </ChildContent>
                        </RadzenLineSeries>
                        break;
                    };
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.BarChart:
                    {                          
                        string color = string.IsNullOrEmpty(series.Color)
                            ? colors[i]
                            : series.Color;

                        <RadzenBarSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value"
                            Fill=@color
                            LineType="@((LineType)Enum.Parse(typeof(LineType), series.LineType))" C>
                            <TooltipTemplate Context="data">           
                                @(string.Format(this.FormatString, data.Category)) : @data.Value
                                </TooltipTemplate>
                            <ChildContent>      
                                <RadzenMarkers Stroke=@color MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                            </ChildContent>
                        </RadzenBarSeries>
                        break;
                    };
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.ColumnChart:
                    {   
                        string color = string.IsNullOrEmpty(series.Color)
                            ? colors[i]
                            : series.Color;   
                            
                        <RadzenColumnSeries Data="@seriesItem" CategoryProperty="Category" 
                            Title="@group.Title" ValueProperty="Value" 
                            Fill=@color
                            LineType="@((LineType)Enum.Parse(typeof(LineType), series.LineType))">
                            <TooltipTemplate Context="data">           
                                @(string.Format(this.FormatString, data.Category)) : @data.Value
                                </TooltipTemplate>
                            <ChildContent>      
                                <RadzenMarkers Stroke=@color MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                            </ChildContent>
                        </RadzenColumnSeries>
                        break;
                    };
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.DonutChart:
                    {                           
                        <RadzenDonutSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value">
                            <RadzenMarkers MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                        </RadzenDonutSeries>
                        break;
                    };
                    case JXNippon.CentralizedDatabaseSystem.Domain.Charts.ChartType.PieChart:
                    {                           
                        <RadzenPieSeries Data="@seriesItem" CategoryProperty="Category"
                            Title="@group.Title" ValueProperty="Value"
                            Fills=@colors>
                            <RadzenMarkers MarkerType="@((MarkerType)Enum.Parse(typeof(MarkerType), series.MarkerType))" />
                            </RadzenPieSeries>
                            break;
                        };
                    default:
                        {
                            break;       
                        }

                }


            }
            haveData = haveData || seriesList.Count() > 0;

        }
        if (!haveData)
        {
            <Empty/> 
        }

    }
    else
    {
        <Empty/>  
    }

    
    <RadzenCategoryAxis Formatter="@Format" Step="@Step"/>
    <RadzenValueAxis Step="@ValueAxisStep">
        <RadzenGridLines/>
        <RadzenAxisTitle Text="@AxisTitle"/>
    </RadzenValueAxis>
    <RadzenLegend Position=LegendPosition.Bottom></RadzenLegend>
</RadzenChart>
