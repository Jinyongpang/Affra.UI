@using System.Text.Json;
@using Affra.Core.Domain.Services
@using JXNippon.CentralizedDatabaseSystem.Domain.Grids
@using JXNippon.CentralizedDatabaseSystem.Domain.Views
@using JXNippon.CentralizedDatabaseSystem.Domain.Charts
@using JXNippon.CentralizedDatabaseSystem.Notifications
@using JXNippon.CentralizedDatabaseSystem.Shared.Constants
@using JXNippon.CentralizedDatabaseSystem.Shared.Description
@using ViewODataService.Affra.Service.View.Domain.Views
@using Row = ViewODataService.Affra.Service.View.Domain.Views.Row

@inject IViewService ViewService
@inject DialogService DialogService
@inject IServiceProvider ServiceProvider
@inject AffraNotificationService AffraNotificationService

@if (View is not null)
{
    int id = 0;
    foreach(var row in View.Rows)
    {
        <div class="row">
            @if (row.Columns is null
                || row.Columns.Count == 0)
            {
                 int j = id;
                 <div class="col py-1" ondragover="event.preventDefault();" @ondrop=@(args => HandleDropOnRowAsync(args, row)) @ondragenter="@(args => HandleDragEnter(j))">
                    <Card Style="text-align: center;" Class="h-100 card-shadow"> 
                        <TitleTemplate>
                        </TitleTemplate>
                        <Extra>
                            @if (IsDesignMode)
                            {
                                <a @onclick=@(args => ShowDeleteDialogAsync(args, row)) class="px-2"><i class="fa-solid fa-trash fa-lg text-danger"></i></a>
                            }
                        </Extra>
                        <Body>
                            @{
                                var isDropped = this.enteredId == j;
                                var targetclass = isDropped && IsDesignMode ? "draggable-target can-drop" : string.Empty;
                                var message = IsDesignMode 
                                    ? "Drag and drop a component to this empty row."
                                    : "This is an empty row.";

                                <div class="d-flex align-items-center justify-content-center gap-3 @targetclass" ondragover="event.preventDefault();" draggable="false" @ondragleave="@(args => HandleDragLeave(j))" @ondrop=@(args => HandleDropOnRowAsync(args, row))>
                                    <JXNippon.CentralizedDatabaseSystem.Shared.Description.GenericDescription Height="300px" Width="300px" ImageFile="@ImageFile.Piechart" Description=@message>
                                    </JXNippon.CentralizedDatabaseSystem.Shared.Description.GenericDescription>                                 
                                </div>
                            }                           
                        </Body>
                    </Card>  
                 </div> 
                 id++;
            }
       
            @{
                foreach(var col in row.Columns.OrderBy(col => col.Sequence)) 
                {
                    this.UpdateColumnDictionary(col);
                    cardClasses.Add(string.Empty);
                    int j = id;

                    @if (this.enteredId == j && this.draggedId != j && (col.RowId != draggingItem.RowId || col.Sequence != draggingItem.Sequence + 1))
                    {
                         <div class="col py-3 px-3 can-drop" ondragover="event.preventDefault();" @ondragleave="@(args => HandleDragLeave(j))" @ondrop=@(args => HandleDropOnColumnAsync(args, col))/> 
                    }
                    ColumnComponent columnComponent = JsonSerializer.Deserialize<ColumnComponent>(col.ColumnComponent);
                    var widthGridSize = columnComponent.WidthGridSize is null
                        ? "col-md"
                        : $"col-md-{columnComponent.WidthGridSize}";

                    <div class="view-column-card col-sm-12 py-3 @draggableClass @this.GetFocusClass(j, @widthGridSize)" draggable="@isDraggable" ondragover="event.preventDefault();"
                        @ondrop=@(args => HandleDropOnColumnAsync(args, col))
                        @ondragstart=@(args => HandleDragStart(args, row, col, j))         
                        @ondragenter="@(args => HandleDragEnter(j))"
                        @ondragend=@(args => this.enteredId = -1)> 

                        <Card Size="medium" Id=@j.ToString() Style="pointer-event: none;" Class=@($"h-100 card-shadow view-chart view-grid {this.GetCardFocusClass(j)}")>
                            <TitleTemplate>
                                <span>
                                    <i class="@col.Icon"></i>
                                    @col.Title
                                </span>
                            </TitleTemplate>
                            <Extra>
                                @if (IsDesignMode)
                                {
                                    <a @onclick=@(args => OnEditAsync(args, col))><i class="fa-solid fa-pen-to-square fa-lg text-info"></i></a>
                                    <a @onclick=@(args => ShowDeleteDialogAsync(args, col)) class="px-2"><i class="fa-solid fa-trash fa-lg text-danger"></i></a>
                                }
                                else if(this.focusId == -1)
                                {
                                    <AntDesign.Button OnClick="@(() => this.OnFocusAsync(j))"><i class="fa-solid fa-up-right-and-down-left-from-center extra-icon"></i></AntDesign.Button>
                                }
                                else
                                {
                                    <AntDesign.Button OnClick="@(() => this.OnFocusAsync(-1))"><i class="fa-solid fa-down-left-and-up-right-to-center extra-icon"></i></AntDesign.Button>
                                }
                            </Extra>
                            <Body>
                                @if (col.ComponentType ==  nameof(Chart))
                                {
                                    Chart chart = JsonSerializer.Deserialize<Chart>(col.ColumnComponent);
                                    string type = ViewService.GetTypeMapping()[chart.Type];
                                    <ChartComponent @ref="@chartComponentRef" StartDate="@StartDate" EndDate="@EndDate" TType="@type" Subscription="@chart.Type" AxisTitle="@chart.AxisTitle" FormatString="@chart.FormatString" 
                                        Step="@TimeSpan.FromMinutes(chart.StepInMinutes)" ValueAxisStep="@chart.ValueAxisStep" ChartSeries="@chart.ChartSeries" Column="@col"></ChartComponent>
                                }
                                else if (col.ComponentType ==  nameof(Grid))
                                {
                                    Grid grid = JsonSerializer.Deserialize<Grid>(col.ColumnComponent);
                                    string type = ViewService.GetTypeMapping()[grid.Type];
                                    <DataGridComponent @ref="@gridComponentRef" TType="@type" Subscription="@grid.Type" StartDate="@StartDate" EndDate="@EndDate" GridColumns="@grid.GridColumns" Column="@col"></DataGridComponent>
                                }
                            </Body>
                        </Card>               
                    </div> 
                  
                   id++;
                }
            }
        </div>
    }
}

@code
{

}
