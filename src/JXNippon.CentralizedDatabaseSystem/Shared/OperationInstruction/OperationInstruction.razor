@using ManagementOfChangeODataService.Affra.Service.ManagementOfChange.Domain.OperationInstructions
<Layout Class="layout-view">
    <Header>
        <div class="row">
            <div class="col-3">
                <span>Operation Instruction</span>
            </div>
            <div class="col-9 float-right align-items-center text-right mt-1">
                <Space Size="@("middle")">
                    <SpaceItem>
                        <Search Size="@("large")" Placeholder="Search..." Style="20vw;" OnChange=@(args => ReloadAsync(null)) @bind-Value=search ClassicSearchIcon />
                    </SpaceItem>                   
                    <SpaceItem>
                        <AuthorizeView Policy="ManagementOfChange.ReadWrite">
                            <Button Type="primary" Size="@("large")" Shape="@ButtonShape.Round" OnClick="@(() => ShowDialogAsync(new OperationInstructionRecord()))">
                                <ChildContent>
                                    <Icon Type="plus-circle" Theme="outline" Class="anticon-big" /><span style="font-size: 18px; margin-left: 10px;">Add</span>
                                </ChildContent>
                            </Button>
                        </AuthorizeView>
                    </SpaceItem>
                </Space>
            </div>
        </div>       
    </Header>
    <Layout Style="height: 100%;">
        <Sider Width=250 Collapsible>
            <Menu DefaultSelectedKeys=@(new[] { "All" }) @ref=@menu Style="height: 100%;" Mode=@MenuMode.Inline OnMenuItemClicked=OnMenuItemSelectAsync>
                <MenuItem Key="All"><span style="font-size: 16px; margin-left: 0px;">All</span></MenuItem>
                    @foreach (var oiStatus in Enum.GetValues(typeof(OperationInstructionStatus)).Cast<OperationInstructionStatus>().ToList())
                    {
                        <MenuItem Key="@oiStatus.ToString()">
                            @if (oiStatus == OperationInstructionStatus.Completed)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@(stringLocalizer[oiStatus.ToString()])" />
                            }
                            else if (oiStatus == OperationInstructionStatus.PendingForApproval)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="@(stringLocalizer[oiStatus.ToString()])" />
                            }
                            else if (oiStatus == OperationInstructionStatus.Approved)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@(stringLocalizer[oiStatus.ToString()])" />
                            }
                            else if (oiStatus == OperationInstructionStatus.Rejected)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="@(stringLocalizer[oiStatus.ToString()])" />
                            }
                            else if (oiStatus == OperationInstructionStatus.Deleted)
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Dark" Text="@(stringLocalizer[oiStatus.ToString()])" />
                            }
                            else
                            {
                                <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@(stringLocalizer[oiStatus.ToString()])" />
                            }
                        </MenuItem>
                    }
            </Menu>
        </Sider>
        <Layout>
            <Content Style="overflow-y: auto; overflow-x:hidden; height:100%;">
                <OperationInstructionDataList @ref=operationInstructionDataList></OperationInstructionDataList>
            </Content>
        </Layout>
    </Layout>
</Layout>
