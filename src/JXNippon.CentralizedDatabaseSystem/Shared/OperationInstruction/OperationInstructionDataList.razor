@using JXNippon.CentralizedDatabaseSystem.Shared.Description
@using ManagementOfChangeODataService.Affra.Service.ManagementOfChange.Domain.ManagementOfChanges
@using ManagementOfChangeODataService.Affra.Service.ManagementOfChange.Domain.OperationInstructions
 
@if (!isLoading && count == 0)
{       
<div class="min-vh-56 d-flex align-items-center justify-content-center gap-3">
    <GenericDescription Height="300px" ImageFile="@ImageFile.NoData" Description="No result found.">
    </GenericDescription>
</div>
}

<div class="row px-3 py-2">
    <Virtualize Context="context" ItemsProvider="@LoadDataAsync" TItem=OperationInstructionRecord ItemSize=25 OverscanCount=10 @ref=@this.virtualize>
        <Placeholder>
            <div class="col-sm-12 col-md-4 py-2 pr-1" style="min-height:200px;">
                <Card Class="h-100">
                    <Body>
                        <Skeleton Active></Skeleton>
                    </Body>
                </Card>  
            </div>    
        </Placeholder>
        <ItemContent>
            <div class="col-sm-12 col-md-4 py-2 pr-1" style="min-height:200px;">
                <Card Style="min-height:200px;" Class="data-list-card">
                    <TitleTemplate>
                        <div class="d-flex flex-row align-items-center">
                            <div>
                                <span class="mb-0 title" href="#"><i class="oi oi-spreadsheet"></i> @(context.OperationInstructionNo)</span>
                            </div>
                        </div>
                    </TitleTemplate>
                    <Body>
                        <div class="d-flex flex-row align-items-center">
                            <div class="col-9">
                                <div class="text-truncate">Field : @(context.OperationInstructionField.ToString())</div>
                                <div class="text-truncate">Estimated Duration : @(context.EstimatedDuration)</div>
                                <div class="text-truncate">Creator : @(context.CreatedBy)</div>
                            </div>
                            <div class="col-3 text-center">
                                <Progress Format=_fortmat1 Type=ProgressType.Circle Percent=@(GetPercentage((int)Enum.Parse(typeof(OperationInstructionCurrentStep), context.OperationInstructionCurrentStep.ToString()))) Size=ProgressSize.Small />
                            </div>
                        </div>
                        <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                        <div class="row">
                            <div class="col-md-8 text-truncate card-time">
                                <b>@string.Format(System.Globalization.CultureInfo.CurrentCulture, "Created Date : {0:d}", context.CreatedDateTime.ToLocalTime())</b>
                            </div>
                            <div class="col-md-8 text-truncate card-time">
                                <b>@string.Format(System.Globalization.CultureInfo.CurrentCulture, "Expiry Date : {0:d}", context.CreatedDateTime.AddDays(context.EstimatedDuration).ToLocalTime())</b>
                            </div>
                            <div class="col-md-12 text-right" style="padding-top:5px">
                                @if (context.OperationInstructionStatus == OperationInstructionStatus.Completed)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@(stringLocalizer[context.OperationInstructionStatus.ToString()])" />
                                }
                                else if (context.OperationInstructionStatus == OperationInstructionStatus.PendingForApproval)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="@(stringLocalizer[context.OperationInstructionStatus.ToString()])" />
                                }
                                else if (context.OperationInstructionStatus == OperationInstructionStatus.Approved)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@(stringLocalizer[context.OperationInstructionStatus.ToString()])" />
                                }
                                else if (context.OperationInstructionStatus == OperationInstructionStatus.Rejected)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="@(stringLocalizer[context.OperationInstructionStatus.ToString()])" />
                                }
                                else if (context.OperationInstructionStatus == OperationInstructionStatus.Deleted)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Dark" Text="@(stringLocalizer[context.OperationInstructionStatus.ToString()])"/>
                                }
                                else
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="@(stringLocalizer[context.OperationInstructionStatus.ToString()])" />
                                }
                                    
                            </div>
                        </div>
                    </Body>
                    <ActionTemplate>
                        @if(isUserHavePermission
                        && context.OperationInstructionStatus != OperationInstructionStatus.Deleted)
                        {
                            <CardAction><Tooltip Title=@("Delete Form...")><Icon Class="anticon-big" Type="delete" OnClick="@(() => DeleteOIFormAsync(context))"/></Tooltip></CardAction>
                        }
                        <CardAction><Tooltip Title=@("View...")><Icon Class="anticon-big" Type="eye" OnClick="@(() => ShowDialogAsync(context))"/></Tooltip></CardAction>
                    </ActionTemplate>
                </Card>
            </div>
        </ItemContent>
    </Virtualize>
</div>