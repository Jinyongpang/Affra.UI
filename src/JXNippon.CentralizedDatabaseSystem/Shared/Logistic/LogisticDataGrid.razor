@using CentralizedDatabaseSystemODataService.Affra.Service.CentralizedDatabaseSystem.Domain.Logistics

<div class="row">
    <div class="col">
        <RadzenButton Click="@ReloadAsync" Text="Refresh" Icon="refresh" ButtonStyle="ButtonStyle.Light" Style="margin-bottom: 20px;" Visible="@ShowRefreshButton" />   
        <RadzenDataGrid @ref="grid" IsLoading="@isLoading" Count="@Count" Data="@items" LoadData="@LoadDataAsync" 
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowFiltering="false" AllowPaging="true" 
            PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" TItem="DailyLogistic" 
            ColumnWidth="200px" AllowColumnResize="true" ShowPagingSummary="true" CellContextMenu="@OnCellContextMenu"
            AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true"
            PagerAlwaysVisible="@PagerAlwaysVisible">
            <EmptyTemplate>                
                <div class="row" @oncontextmenu=@(args => OnCellContextMenu(args)) @oncontextmenu:preventDefault="true">
                    <a>No records to display.</a>
                </div>                    
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="DailyLogistic" Property="LogisticName" Title="Logistic Name" Width="40px">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DailyLogistic" Property="Remark" Title="Remark" Width="100px" />
                <RadzenDataGridColumn TItem="DailyLogistic" Property="Date" Title="Date" Width="30px" SortOrder="SortOrder.Descending" Visible="@ShowDateColumn">
                    <Template Context="DailyLogistic">
                        @String.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:d}", DailyLogistic.Date.ToLocalTime())
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>  
    </div>
</div>

@code
{
    private void OnCellContextMenu(MouseEventArgs args)
    {
        bool hasRowData = (args as DataGridCellMouseEventArgs<DailyLogistic>) != null;
        ContextMenuService.Open(args, ds =>
           @<RadzenMenu Click="@(e => OnMenuItemClickAsync(args as DataGridCellMouseEventArgs<DailyLogistic>, e))">
                <RadzenMenuItem Text="Add ..." Value="0" Icon="note_add"/>
                <RadzenMenuItem Text="Edit ..." Value="1" Icon="description" Visible=@hasRowData/>
                <RadzenMenuItem Text="Delete ..." Value="2" Icon="delete" Visible=@hasRowData/>
                <RadzenMenuItem Text="View ..." Value="3" Icon="launch" Visible=@hasRowData/>
                <RadzenMenuItem Text="Refresh" Value="4" Icon="refresh"/>
        </RadzenMenu>
        );  
    }

    private async Task OnMenuItemClickAsync(DataGridCellMouseEventArgs<DailyLogistic> args, MenuItemEventArgs e)
    {
        int i = (int)e.Value;
        if (i == 0)
        {
            await ShowDialogAsync(
                new DailyLogistic() { LogisticName = args?.Data?.LogisticName, Date = DateTimeOffset.Now.Date },
                i,
                "Add");
        }
        else if (i == 1)
        {
            args.Data.Date = args.Data.Date.ToLocalTime();
            await ShowDialogAsync(args.Data, i, "Edit");
        }
        else if (i == 2)
        {
            await ShowDialogAsync(args.Data, i, "Delete");
        }
        else if (i == 3)
        {
            args.Data.Date = args.Data.Date.ToLocalTime();
            await ShowDialogAsync(args.Data, i, "View");
        }
        else if (i == 4)
        {
            await grid.Reload();      
        }
    }
}