@using DataExtractorODataService.Affra.Service.DataExtractor.Domain.DataFiles;

<Layout Class="layout-view">
    <Header>
        <div class="row">
            <div class="col-3">
                <span>File Management</span>
            </div>
            <div class="col-9 float-right align-items-center text-right mt-1">
                <Space Size="@("middle")">
                    <SpaceItem>
                        <Select Mode="tags"
                                @bind-Values="@selectedStatuses"
                                Placeholder="Status"
                                TItemValue="string"
                                TItem="string"
                                Size="@("large")" Style="min-width: 20vw;" Class="text-left"
                                OnSelectedItemsChanged="OnStatusFilterChangedAsync"
                                AllowClear>
                            <SelectOptions>
                                @foreach (var item in FileProcessStatusHolders)
                                {
                                    <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                                }
                            </SelectOptions>           
                        </Select>
                    </SpaceItem>
                    <SpaceItem>
                        <Search Size="@("large")" Placeholder="Search file..." Style="width: 20vw;" OnInput=@(args => ReloadAsync(searchInput : args.Value as string)) @bind-Value=search ClassicSearchIcon/>
                    </SpaceItem>
                    <SpaceItem>
                        @if (false && !string.IsNullOrEmpty(this.folder))
                        {
                            <Button Type="default" Size="@("large")" Shape="@ButtonShape.Round" OnClick=@(args => ReloadAsync(null))>
                                <ChildContent>
                                  <Upload Multiple ShowUploadList>
                                        <label><InputFile id="fileInput" OnChange="UploadAsync" hidden multiple/><Icon Type="upload" Theme="outline" Class="anticon-big"/><span style="font-size: 18px; margin-left: 10px;">Upload</span></label>
                                   </Upload>     
                                </ChildContent>
                            </Button>
                        }
                        <Button Type="primary" Size="@("large")" Shape="@ButtonShape.Round" OnClick=@(args => ReloadAsync(null))>
                            <ChildContent>
                                <Icon Type="reload" Theme="outline" Class="anticon-big"/><span style="font-size: 18px; margin-left: 10px;">Reload</span>
                            </ChildContent>
                        </Button>
                    </SpaceItem>
                </Space>
            </div>
        </div>       
    </Header>
    <Layout Style="height: 100%;">
        <Sider Class="d-none d-lg-inline" Width="300">
            <RadzenTree Data=@this.folders Expand=@LoadFolder ValueChanged=@OnValueChangedAsync Style="background-color: white; width: 100%; height: 100%">
                <RadzenTreeLevel Text=@this.GetTextForNode Template=@this.FolderTemplate>
                </RadzenTreeLevel>
            </RadzenTree>
        </Sider>
        <Content Style="overflow-y: auto; overflow-x:hidden; height:100%;">
            <FileManagementDataList @ref=fileManagementDataList></FileManagementDataList>
        </Content>
    </Layout>
</Layout>
